#!/usr/bin/make -f

export DH_VERBOSE=1
export SKIP_BUILD
export CARGO_HOME = $(CURDIR)/debian/cargo_home
export RUSTUP_HOME = $(CURDIR)/debian/rustup_home

# Optimize Rust compilation for space efficiency
export CARGO_BUILD_JOBS = 1
export CARGO_INCREMENTAL = 0
export CARGO_NET_OFFLINE = true
export RUST_BACKTRACE = 0

%:
	dh $@

override_dh_auto_configure:
	# Install Rust via rustup if not available or if cargo version is too old
	if ! which cargo >/dev/null 2>&1 || ! cargo --version | grep -q "1\.[8-9][0-9]\|1\.[0-9][0-9][0-9]"; then \
		mkdir -p $(RUSTUP_HOME) $(CARGO_HOME); \
		curl https://sh.rustup.rs -sSf | \
		RUSTUP_HOME=$(RUSTUP_HOME) CARGO_HOME=$(CARGO_HOME) \
		sh -s -- -y --no-modify-path; \
	fi

override_dh_auto_build:
	if [ "$$SKIP_BUILD" = "1" ]; then \
		echo "Skipping cargo build as requested"; \
	else \
		export CARGO_BUILD_JOBS=1; \
		export CARGO_TARGET_DIR=$(CURDIR)/target; \
		export TMPDIR=$(CURDIR)/build_tmp; \
		export HOME=$(CURDIR)/build_home; \
		export RUST_BACKTRACE=0; \
		mkdir -p $(CURDIR)/build_tmp $(CURDIR)/build_home; \
		PATH="$(CARGO_HOME)/bin:$(PATH)" cargo build --release --jobs 1 --config "build.jobs=1" || \
		PATH="$(CARGO_HOME)/bin:$(PATH)" cargo build --release --jobs 1; \
		find $(CURDIR)/target -name "*.rlib" -delete 2>/dev/null || true; \
		find $(CURDIR)/target -name "*.rmeta" -delete 2>/dev/null || true; \
		rm -rf $(CURDIR)/build_tmp $(CURDIR)/build_home; \
	fi

override_dh_auto_install:
	# Create required directories
	mkdir -p debian/hifiberry-audiocontrol/usr/bin
	mkdir -p debian/hifiberry-audiocontrol/usr/share/hifiberry-audiocontrol
	mkdir -p debian/hifiberry-audiocontrol/etc/audiocontrol
	# Install main binary
	if [ -f target/release/audiocontrol ]; then \
		cp target/release/audiocontrol debian/hifiberry-audiocontrol/usr/bin/audiocontrol; \
		chmod +x debian/hifiberry-audiocontrol/usr/bin/audiocontrol; \
	fi
	# Install CLI tools if they exist
	for tool in audiocontrol_lms_client audiocontrol_musicbrainz_client audiocontrol_send_update audiocontrol_dump_store audiocontrol_dump_cache audiocontrol_notify_librespot audiocontrol_player_event_client audiocontrol_list_mpris_players audiocontrol_get_mpris_state audiocontrol_monitor_mpris_state audiocontrol_listen_shairportsync audiocontrol_favourites; do \
		if [ -f "target/release/$$tool" ]; then \
			cp "target/release/$$tool" "debian/hifiberry-audiocontrol/usr/bin/$$tool"; \
			chmod +x "debian/hifiberry-audiocontrol/usr/bin/$$tool"; \
		fi; \
	done
	# Install Python now playing client
	if [ -f example/python/audiocontrol_nowplaying.py ]; then \
		cp example/python/audiocontrol_nowplaying.py debian/hifiberry-audiocontrol/usr/bin/audiocontrol_nowplaying; \
		chmod +x debian/hifiberry-audiocontrol/usr/bin/audiocontrol_nowplaying; \
	fi
	# Install default configuration files
	if [ -f configs/audiocontrol.json ]; then \
		cp configs/audiocontrol.json debian/hifiberry-audiocontrol/etc/audiocontrol/; \
	fi
	if [ -f configs/logging.json ]; then \
		cp configs/logging.json debian/hifiberry-audiocontrol/etc/audiocontrol/; \
	fi
	# Install genres configuration
	if [ -f configs/genres.json ]; then \
		cp configs/genres.json debian/hifiberry-audiocontrol/etc/audiocontrol/; \
	fi

override_dh_auto_clean:
	dh_auto_clean
	# Comprehensive cleanup to free space
	rm -rf target/
	rm -rf $(CARGO_HOME)
	rm -rf $(RUSTUP_HOME)
	rm -rf $(CURDIR)/build_tmp
	rm -rf $(CURDIR)/build_home
	rm -rf debian/.debhelper/
	rm -f debian/*.debhelper.log
	rm -f debian/*.postrm.debhelper
	rm -f debian/*.substvars
	# Clean any cargo lock files and caches
	rm -f Cargo.lock
	find . -name "*.rlib" -delete 2>/dev/null || true
	find . -name "*.rmeta" -delete 2>/dev/null || true

override_dh_installsystemd:
	dh_installsystemd --name=audiocontrol --restart-after-upgrade

override_dh_strip:
	# Skip debug symbol extraction - don't create dbgsym package
	dh_strip --no-automatic-dbgsym
